##############
# The Macros #
##############

[gcode_macro G32]
gcode:
  STATUS_HOMING
  SAVE_GCODE_STATE NAME=STATE_G32
  G90
  G28
  QUAD_GANTRY_LEVEL
  G28
  ##  Uncomment for for your size printer:
  #---------------------------------------
  ##  Uncomment for 350mm build
  G0 X175 Y175 Z30 F6000
  #---------------------------------------
  RESTORE_GCODE_STATE NAME=STATE_G32
  STATUS_READY

[bed_mesh]
speed: 300
horizontal_move_z: 10
#----------------------------
##	Uncomment for 350mm build
mesh_min: 10, 10
mesh_max: 330,330
#----------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
#relative_reference_index: ((x points * y points) - 1) / 2.

# PRINT START/END ---------------------------------------------------------
# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗████████╗ █████╗ ██████╗ ████████╗
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       ███████╗   ██║   ███████║██████╔╝   ██║   
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ╚════██║   ██║   ██╔══██║██╔══██╗   ██║   
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████║   ██║   ██║  ██║██║  ██║   ██║   
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   
# *** THINGS TO UNCOMMENT: ***
# Bed mesh (2 lines at 2 locations)
# Screw_tilt_adjust if your printer is a Trident
# Quad gantry level if your printer is a V2
# Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set filament_type = params.FILAMENT_TYPE %}
  #SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
  SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  {% if printer.homed_axes != 'XYZ' %}
    STATUS_HOMING         # Sets SB-leds to homing-mode
    G28                   # Full home (XYZ)
    G90                   # Absolute position
  {% endif %}

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan
    #SET_FAN_SPEED FAN=nevermore SPEED=1                                          # Turn on Nevermore
    G1 X{x_wait} Y{y_wait} Z15 F9000                                             # Goes to center of the bed
    M190 S{target_bed}                                                           # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"                           # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
      
  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    STATUS_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                          # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for V2 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Quad Gantry Level"      # Displays info
  STATUS_LEVELING                 # Sets SB-leds to leveling-mode
  quad_gantry_level               # Levels the buildplate via QGL
  G28 Z                           # Homes Z again after QGL

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  #STATUS_CLEANING
  #CLEAN_NOZZLE

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  G90                                              # Absolut position

# PRINT START/END ---------------------------------------------------------
# ██████╗ ██████╗ ██╗███╗   ██╗████████╗    ███████╗███╗   ██╗██████╗ 
# ██╔══██╗██╔══██╗██║████╗  ██║╚══██╔══╝    ██╔════╝████╗  ██║██╔══██╗
# ██████╔╝██████╔╝██║██╔██╗ ██║   ██║       █████╗  ██╔██╗ ██║██║  ██║  
# ██╔═══╝ ██╔══██╗██║██║╚██╗██║   ██║       ██╔══╝  ██║╚██╗██║██║  ██║   
# ██║     ██║  ██║██║██║ ╚████║   ██║       ███████╗██║ ╚████║██████╔╝   
# ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝   ╚═╝       ╚══════╝╚═╝  ╚═══╝╚═════╝   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M117 Print Complete...
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                        # wait for buffer to clear
    G92 E0                      # zero the extruder
    G1 E-5.0 F1800              # retract filament
    
    TURN_OFF_HEATERS            # Turn off heaters
    #{% if params.BED|int > 90 %}
    #  M106 S255                                           # Turns on the PT-fan
    #  STATUS_COOLING              # Sets SB-leds to cooling-mode
    #  UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    #  UPDATE_DELAYED_GCODE ID=chamber DURATION=180
    #  M141 S35                    # Set Enclosure temp fan to 35c
    #{% else %}
    #  STATUS_COOLING              # Sets SB-leds to cooling-mode
    #{% endif %}
    M141 S35                    # Set Enclosure temp fan to 35c
    STATUS_COOLING              # Sets SB-leds to cooling-mode
    M106 S255                   # Turns on the PT-fan
    G90                                                           # absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                       # move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600     # park nozzle at rear
    UPDATE_DELAYED_GCODE ID=filter_off DURATION=180
    M107                                                          # turn off fan
    
    BED_MESH_CLEAR                                                # Clear Bed Mesh
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    M117 Ready...

[gcode_macro Nozzle_Purge]
gcode:
    M117 Nozzle Purging...
    G28
    G92 E0;
    G90
    G0 X140 Y5 F6000

    G0 Z0.4
    G91
    G1 X70 E15 F1200;
    G1 Y1
    G1 X-70 E15 F1200;
    G92 E0;

    G90
    G1 Z15.0 F600                  ;move the gantry up 15mm
    G1 X175 Y175 F3000
    G92 E0                         ;zero the extruded length again
    G1 F9000
    M117 Nozzle Purge complete...
    
[gcode_macro Preheat_ABS]
gcode:
    M117 Preheating for ABS
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=100 # Set bed to 100C
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=250   # Set extruder to 250C
    SET_FAN_SPEED FAN=Nevermore SPEED=0.50

[gcode_macro Preheat_PLA]
gcode:
    M117 Preheating for PLA
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60  # Set bed to 60C
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200   # Set extruder to 200C
    SET_FAN_SPEED FAN=Nevermore SPEED=0.50
    SET_FAN_SPEED FAN=Exhaust SPEED=1

[gcode_macro SEARCH_VARS]
#
# SEARCH_VARS
#
# Dump the printer object so you can find variables of interest
# Credit to https://gist.github.com/mpalpha/ for the original
#
description: Dump the printer object to the console
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
